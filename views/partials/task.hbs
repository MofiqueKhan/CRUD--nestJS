<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Task Manager</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style>
    /* Custom styles for the task list */
    #task-list {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
    }

    .list-group-item {
      border: 1px solid #ced4da;
      border-radius: 5px;
      position: relative;
      padding: 20px;
    }

    .btn {
      margin-bottom: 10px;
    }

    small {
      position: absolute;
      bottom: 10px;
      right: 10px;

    }

    .list-group-item:hover {
      background-color: #f8f9fa;
    }

    .badge {
      font-size: 0.8em;
    }

    h5 {
      color: #007bff;
      text-align: center;
      /* Center-align title */
    }

    p {
      color: #6c757d;
      text-align: center;
      /* Center-align description */
    }

    .list-group-item div {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      /* Center-align content */
    }

    /* Task description and title spacing */
    .task-title {
      font-weight: bold;
      font-size: 1.2rem;
      margin-bottom: 5px;
    }

    .task-description {
      font-size: 1rem;
      margin-bottom: 10px;
      max-width: 90%;
      overflow-wrap: break-word;
      /* Prevent long words from overflowing */
    }

    .task-status {
      font-weight: bold;
      color: #007bff;
    }

    /* Navbar styling */
    .navbar {
      background-color: #007bff;
      color: white;
    }

    .navbar-brand {
      font-weight: bold;
      color: white !important;
    }

    .navbar-nav .nav-link {
      color: white !important;
    }
        .navbar-nav .nav-link button{
      color: black !important;
    }
    /* Footer styling */
    .footer {
      background-color: #f8f9fa;
      padding: 20px;
      text-align: center;
      color: #6c757d;
      margin-top: 30px;
    }

    /* Mobile responsiveness */
    @media (max-width: 767px) {
      #task-form {
        padding: 15px;
      }

      h1,
      h2 {
        font-size: 1.5rem;
      }

      .list-group-item {
        flex-direction: column;
        align-items: flex-start;
      }

      .list-group-item div {
        margin-bottom: 10px;
      }

      .navbar {
        padding: 10px;
      }

      .footer {
        padding: 15px;
      }
    }

    h1 {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      font-size: 1.5rem;
      color: #007bff;
      padding: 10px;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }

    h2 {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      font-size: 1.5rem;
      color: #007bff;
      padding: 10px;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light">
    <a class="navbar-brand" href="#">Task Manager</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
      aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav ml-auto">
        <li class="nav-item">
          <a class="nav-link" href="#">Dashboard</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Profile</a>
        </li>
        <li class="nav-item">
          <button class="nav-link" onclick="logout()">Logout</button>
        </li>
      </ul>
    </div>
  </nav>

  <div class="container mt-5">
    <!-- Task Form -->
    <div class="d-flex justify-content-center align-items-center" style="height: 15vh;">
      <h1 class="text-center">
        Create a new Task
      </h1>
    </div>
    <form id="task-form" class="border p-4 rounded shadow">
      <div class="form-group">
        <label for="title">Task Title</label>
        <input type="text" id="title" class="form-control" placeholder="Task Title">
      </div>
      <div class="form-group">
        <label for="description">Task Description</label>
        <textarea id="description" class="form-control" placeholder="Task Description"></textarea>
      </div>
      <button type="submit" class="btn btn-primary">Create Task</button>
    </form>

    <!-- Display Tasks -->
    <div class="d-flex justify-content-center align-items-center" style="height: 15vh;">
      <h2 class="mt-5 text-center">Your Tasks</h2>
    </div>
    <ul id="task-list" class="list-group mt-4">
      {{#each tasks}}
      <li class="list-group-item d-flex justify-content-between align-items-start">
        <div class="flex-grow-1">
          <h5 class="mb-1">{{this.title}}</h5>
          <p class="mb-1">{{this.description}}</p>
        </div>
        <div class="text-end">
          <button class="btn btn-warning btn-sm me-1" onclick="editTask({{this.id}})">
            <i class="fas fa-pencil-alt"></i> Edit
          </button>
          <button class="btn btn-danger btn-sm" onclick="deleteTask({{this.id}})">
            <i class="fas fa-trash-alt"></i> Delete
          </button>
          <small class="text-muted d-block mt-2">Created at: {{this.createdAt}}</small>
        </div>
      </li>
      {{/each}}
    </ul>

    <!-- Footer -->
    <footer class="footer">
      <p>&copy; 2024 Task Manager. All Rights Reserved.</p>
    </footer>

    <script>
      document.getElementById('task-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const title = document.getElementById('title').value;
        const description = document.getElementById('description').value;
        const token = localStorage.getItem('accessToken');

        try {
          const response = await fetch('/tasks', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify({ title, description }),
          });

          if (!response.ok) {
            const errorResponse = await response.text();
            console.error('Error response from server:', errorResponse);
            throw new Error(`Failed to create task. Status: ${response.status}`);
          }

          const result = await response.json();
          console.log('Task created successfully:', result);
          alert('Task created successfully!');
          window.location.reload();

        } catch (error) {
          console.error('Error creating task:', error);
          alert('Failed to create task. Please try again later.');
        }
      });

      async function fetchTasks() {
        const token = localStorage.getItem('accessToken');
        const response = await fetch('/tasks/mytasks', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          }
        });

        if (response.ok) {
          const tasks = await response.json();
          console.log('Fetched tasks:', tasks);
          displayTasks(tasks);
        } else {
          console.error('Error fetching tasks:', response.statusText);
          alert('Failed to load tasks. Please try again later.');
        }
      }

      function displayTasks(tasks) {
        const taskList = document.getElementById('task-list');
        taskList.innerHTML = '';

        if (tasks.length === 0) {
          taskList.innerHTML = '<li class="list-group-item">No tasks found.</li>';
        } else {
          tasks.forEach(task => {
            const taskItem = document.createElement('li');
            taskItem.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-start');

            const taskTitle = document.createElement('h5');
            taskTitle.textContent = task.title;
            taskTitle.classList.add('task-title');
            taskItem.appendChild(taskTitle);

            const taskDescription = document.createElement('p');
            taskDescription.textContent = task.description;
            taskDescription.classList.add('task-description');
            taskItem.appendChild(taskDescription);

            const createdDate = document.createElement('p');
            createdDate.textContent = `Created: ${new Date(task.createdAt).toLocaleString()}`;
            createdDate.classList.add('task-created');
            taskItem.appendChild(createdDate);

            const taskActions = document.createElement('div');
            taskActions.classList.add('task-actions', 'text-end');

            // Create Edit Button with Icon
            const editButton = document.createElement('button');
            editButton.classList.add('btn', 'btn-sm', 'btn-warning', 'me-1');
            editButton.innerHTML = '<i class="fas fa-pencil-alt"></i> Edit'; // Using innerHTML to add icon
            editButton.onclick = () => editTask(task.id);
            taskActions.appendChild(editButton);

            // Create Delete Button with Icon
            const deleteButton = document.createElement('button');
            deleteButton.classList.add('btn', 'btn-sm', 'btn-danger');
            deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete'; // Using innerHTML to add icon
            deleteButton.onclick = () => deleteTask(task.id);
            taskActions.appendChild(deleteButton);

            taskItem.appendChild(taskActions);

            taskList.appendChild(taskItem);
          });
        }
      }

      fetchTasks();

      async function editTask(taskId) {
        const newTitle = prompt('Enter new title:');
        const newDescription = prompt('Enter new description:');

        if (newTitle && newDescription) {
          const token = localStorage.getItem('accessToken');

          try {
            const response = await fetch(`/tasks/${taskId}`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
              },
              body: JSON.stringify({ title: newTitle, description: newDescription }),
            });

            if (!response.ok) {
              throw new Error(`Failed to update task. Status: ${response.status}`);
            }

            const updatedTask = await response.json();
            console.log('Task updated successfully:', updatedTask);
            alert('Task updated successfully!');
            window.location.reload(); // Refresh the task list after update
          } catch (error) {
            console.error('Error updating task:', error);
            alert('Failed to update task. Please try again later.');
          }
        } else {
          alert('Title and description cannot be empty.');
        }
      }

      async function deleteTask(taskId) {
        const confirmDelete = confirm('Are you sure you want to delete this task?');

        if (confirmDelete) {
          const token = localStorage.getItem('accessToken');

          try {
            const response = await fetch(`/tasks/${taskId}`, {
              method: 'DELETE',
              headers: {
                'Authorization': `Bearer ${token}`,
              },
            });

            if (!response.ok) {
              throw new Error(`Failed to delete task. Status: ${response.status}`);
            }

            const deletedTask = await response.json();
            console.log('Task deleted successfully:', deletedTask);
            alert('Task deleted successfully!');
            window.location.reload();
          } catch (error) {
            console.error('Error deleting task:', error);
            alert('Failed to delete task. Please try again later.');
          }
        }
      }

      function logout() {
        if (confirm("Are you sure you want to log out?")) {
          localStorage.removeItem('token'); // Clear token
          localStorage.removeItem('user');  // Clear user info
          window.location.href = '/login';  // Redirect to login
        }
      }
    </script>
</body>

</html>